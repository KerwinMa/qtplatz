/**************************************************************************
** Copyright (C) 2010-2011 Toshinobu Hondo, Ph.D.
** Science Liaison / Advanced Instrumentation Project
*
** Contact: toshi.hondo@scienceliaison.com
**
** Commercial Usage
**
** Licensees holding valid ScienceLiaison commercial licenses may use this
** file in accordance with the ScienceLiaison Commercial License Agreement
** provided with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and ScienceLiaison.
**
** GNU Lesser General Public License Usage
**
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.TXT included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
**************************************************************************/

module ControlMethod {

    enum eDeviceCategory {
        device_unknown
        , device_sampler               // autosampler or anything prepare sample (trigger injection)
        , device_gas_chromatograph     // just GC w/ or w/o injector
        , device_liquid_chromatograph  // degasser, pump, gradienter, oven (sync to an injection)
        , device_detector              // LC/GC detectors including MS
    };
    
    struct InstInfo {
        unsigned long type_id;
        unsigned long unit_id;
        eDeviceCategory category;
        wstring modelname;
        wstring serial_number;
        wstring description;
    };
    
    struct TimeValue {
        unsigned long sec_;
        unsigned long usec_;
    };

    module MethodFunc {
        const unsigned long SampleDelay   =    1;  // autosampler sample sequence time for overwrap 
        const unsigned long Inject        =    2;  // specify a time to inject
        const unsigned long AcqDelay      =    3;  // acquisition delay time 
        const unsigned long AcqStop       =    4;  // acquisition stop time
        const unsigned long User          = 1024;  // instrument dependent method after this number
    };
    
    struct MethodLine {
        boolean isInitialCondition;
        TimeValue time;
        unsigned long type_id;        // instrument model identifier
        unsigned long unit_id;
        unsigned long func_id;        // MethodFunc
        any aline;
    };

    typedef sequence< MethodLine > method_sequence;
    typedef sequence< InstInfo > instinfo_sequence;

    struct Method {
        wstring subject;
        wstring description;
        //-----------//
        instinfo_sequence iinfo;
        method_sequence lines;
    };
    
};
