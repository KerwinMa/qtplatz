// This is a -*- C++ -*- header.
//////////////////////////////////////////
// Copyright (C) 2010 Toshinobu Hondo, Ph.D.
// Science Liaison / Advanced Instrumentation Project
//
// build setup
// $(ACE_ROOT)\bin\tao_idl -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT) $(InputPath)
//////////////////////////////////////////

interface LogHandler;
interface BrokerEventSink;
#include "signalobserver.idl"
#include "controlmethod.idl"

module Broker {

   typedef sequence< wstring > args_type;

    struct LogMessage {
        unsigned long logId;
        long priority;
        long long tv_sec;
        long tv_usec;
        wstring msgId;
        wstring srcId;
        wstring text;
        args_type args;
    };

    struct Attrib {
        wstring key;
        wstring value;
    };
    typedef sequence< Attrib > attrib_sequence;
    typedef sequence< octet > octet_sequence;

    struct Folium {
        wstring path;
        wstring class;
        attrib_sequence attrib;
        octet_sequence serialized;
    };

    interface ChemicalFormula {
        double getMonoIsotopicMass( in wstring formula );
        double getChemicalMass( in wstring formula );
    };

    interface Session {
        boolean connect( in string user, in string pass, in string token, in BrokerEventSink cb );
        boolean disconnect( in BrokerEventSink cb );

        ChemicalFormula getChemicalFormula();

		// interaction with acquire
        boolean coaddSpectrum( in SignalObserver::Observer observer, in double x1, in double x2 );
        Folium folium( in wstring token, in wstring fileId );

		// interaction with targeting
		boolean coaddSpectrumEx( in wstring token, in SignalObserver::Observer observer, in double x1, in double x2 );
		// TBA
		// idea is create SignalObserver::Observer instance in dataproc (or independently in servant)
		// requirements:  independent from 1) file location, 2) file format (CORBA based on datafile adplugin)
		//                3) implement fully threaded targeting algorishm
        //                4) notify results thrugh folium & folium added event from TASK
    };

    interface Logger {
        exception AlreadyExist {
            wstring reason_;
        };
        void log( in LogMessage msg );

        boolean findLog( in unsigned long logId, inout LogMessage msg );
        boolean nextLog( inout LogMessage msg );
        wstring to_string( in LogMessage msg );

        boolean register_handler( in LogHandler handler );
        boolean unregister_handler( in LogHandler handler );
    };

    interface ObjectReceiver {
        oneway void object_discovered( in string name, in string ior ); 
    };

    interface Manager {
        boolean register_handler( in ObjectReceiver cb );
        boolean unregister_handler( in ObjectReceiver cb );
        Session getSession( in wstring connStr );
        Logger getLogger();
        void register_ior( in string name, in string ior );     
        string ior( in string name );
        void register_lookup( in string name, in string ident );
        void shutdown();
    };

};
