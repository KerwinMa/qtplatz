/**************************************************************************
** Copyright (C) 2013 MS-Cheminformatics LLC
** Copyright (C) 2010-2011 Toshinobu Hondo, Ph.D.
*
** Contact: toshi.hondo@qtplatz.com or info@ms-cheminfo.com
**
** Commercial Usage
**
** Licensees holding valid MS-Cheminformatics commercial licenses may use this
** file in accordance with the MS-Cheminformatics Commercial License Agreement
** provided with the Software or, alternatively, in accordance with the terms
** contained in a written agreement between you and MS-Cheminformatics.
**
** GNU Lesser General Public License Usage
**
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.TXT included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
**************************************************************************/

#include "adinterface/brokerclient.idl"
#include "adinterface/global_constants.idl"
#include "adinterface/instrument.idl"
#include "method.idl"
#include "sio.idl"


module TOFConstants {

    const unsigned long ClassID_AnalyzerDeviceData = GlobalConstants::ClassID_MS_BEGIN + 1;
    const unsigned long ClassID_ControlMethod      = GlobalConstants::ClassID_MS_BEGIN + 2;
    const unsigned long ClassID_IonSourceMethod    = GlobalConstants::ClassID_MS_BEGIN + 3;
    const unsigned long ClassID_ProfileData        = GlobalConstants::ClassID_MS_BEGIN + 4;

};

module TOF {

    module Constants {
	const unsigned long ClassID_AnalyzerDeviceData = GlobalConstants::ClassID_MS_BEGIN + 1;
	const unsigned long ClassID_MSMethod           = GlobalConstants::ClassID_MS_BEGIN + 2;
	const unsigned long ClassID_IonSourceMethod    = GlobalConstants::ClassID_MS_BEGIN + 3;
	const unsigned long ClassID_ProfileData        = GlobalConstants::ClassID_MS_BEGIN + 4;
    };

    /*************************************/
    /* CORBA Servant that support an instrument.
       Main module have to inherit from BrokerClient::Accessor interface in order to 
       receive BrokerManager pointer from adplugin loader.  Or, you can create without 
       inherit from BrokerClient::Accessor and register/find BrokerManager using 
       orbservant library module, which is based on UDP broadcast.
     */
    interface Session : Instrument::Session {

        void debug( in wstring text, in wstring key );

        // for tuning
        boolean setControlMethod( in ControlMethod method, in string hint );
    };
    
};
