// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:376


#include "signalC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "signalC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_IonSource_EI_Setpts[] =
      {
        { "source_temp_setpt", &CORBA::_tc_ulong },
        { "interface_temp_setpt", &CORBA::_tc_ulong },
        { "ionization_voltage_setpt", &CORBA::_tc_ulong },
        { "trap_current_setpt", &CORBA::_tc_ulong },
        { "pulse_voltage_setpt", &CORBA::_tc_ulong },
        { "potential_lift_voltage_setpt", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_IonSource_EI_Setpts (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/IonSource_EI_Setpts:1.0",
  "IonSource_EI_Setpts",
  _tao_fields_TOFSignal_IonSource_EI_Setpts,
  6);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_IonSource_EI_Setpts =
    &_tao_tc_TOFSignal_IonSource_EI_Setpts;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::IonSource_EI_Setpts::_tao_any_destructor (
    void *_tao_void_pointer)
{
  IonSource_EI_Setpts *_tao_tmp_pointer =
    static_cast<IonSource_EI_Setpts *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_IonSource_EI_Actuals[] =
      {
        { "source_temp_actual", &CORBA::_tc_ulong },
        { "interface_temp_actual", &CORBA::_tc_ulong },
        { "ionization_voltage_actual", &CORBA::_tc_ulong },
        { "trap_current_actual", &CORBA::_tc_ulong },
        { "pulse_voltage_actual", &CORBA::_tc_ulong },
        { "potential_lift_voltage_actual", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_IonSource_EI_Actuals (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/IonSource_EI_Actuals:1.0",
  "IonSource_EI_Actuals",
  _tao_fields_TOFSignal_IonSource_EI_Actuals,
  6);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_IonSource_EI_Actuals =
    &_tao_tc_TOFSignal_IonSource_EI_Actuals;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::IonSource_EI_Actuals::_tao_any_destructor (
    void *_tao_void_pointer)
{
  IonSource_EI_Actuals *_tao_tmp_pointer =
    static_cast<IonSource_EI_Actuals *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_IonSource_DART_Setpts[] =
      {
        { "to_be_determined", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_IonSource_DART_Setpts (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/IonSource_DART_Setpts:1.0",
  "IonSource_DART_Setpts",
  _tao_fields_TOFSignal_IonSource_DART_Setpts,
  1);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_IonSource_DART_Setpts =
    &_tao_tc_TOFSignal_IonSource_DART_Setpts;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::IonSource_DART_Setpts::_tao_any_destructor (
    void *_tao_void_pointer)
{
  IonSource_DART_Setpts *_tao_tmp_pointer =
    static_cast<IonSource_DART_Setpts *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_IonSource_DART_Actuals[] =
      {
        { "to_be_determined", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_IonSource_DART_Actuals (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/IonSource_DART_Actuals:1.0",
  "IonSource_DART_Actuals",
  _tao_fields_TOFSignal_IonSource_DART_Actuals,
  1);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_IonSource_DART_Actuals =
    &_tao_tc_TOFSignal_IonSource_DART_Actuals;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::IonSource_DART_Actuals::_tao_any_destructor (
    void *_tao_void_pointer)
{
  IonSource_DART_Actuals *_tao_tmp_pointer =
    static_cast<IonSource_DART_Actuals *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_union\union_cs.cpp:79

TOFSignal::IonSourceSetpts::IonSourceSetpts (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = TOF_C::eIonSource_Unknown;
}

TOFSignal::IonSourceSetpts::IonSourceSetpts (const ::TOFSignal::IonSourceSetpts &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case TOF_C::eIonSource_EI:
    {
      this->u_.ei_ = u.u_.ei_;
    }
    break;
    case TOF_C::eIonSource_DART:
    {
      this->u_.dart_ = u.u_.dart_;
    }
    break;
    default:
    break;
  }
}

TOFSignal::IonSourceSetpts::~IonSourceSetpts (void)
{
  // Finalize.
  this->_reset ();
}

void TOFSignal::IonSourceSetpts::_tao_any_destructor (void *_tao_void_pointer)
{
  IonSourceSetpts *tmp =
    static_cast<IonSourceSetpts *> (_tao_void_pointer);
  delete tmp;
}

TOFSignal::IonSourceSetpts &
TOFSignal::IonSourceSetpts::operator= (const ::TOFSignal::IonSourceSetpts &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case TOF_C::eIonSource_EI:
    {
      this->u_.ei_ = u.u_.ei_;
    }
    break;
    case TOF_C::eIonSource_DART:
    {
      this->u_.dart_ = u.u_.dart_;
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void TOFSignal::IonSourceSetpts::_reset (void)
{
  switch (this->disc_)
  {
    
    case TOF_C::eIonSource_EI:
      break;
    case TOF_C::eIonSource_DART:
      break;
    default:
    break;
  }
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\union_typecode.cpp:67

static TAO::TypeCode::Case_T<TOF_C::eIonSource, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_TOFSignal_IonSourceSetpts__0 (TOF_C::eIonSource_EI, "ei", &TOFSignal::_tc_IonSource_EI_Setpts);
static TAO::TypeCode::Case_T<TOF_C::eIonSource, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_TOFSignal_IonSourceSetpts__1 (TOF_C::eIonSource_DART, "dart", &TOFSignal::_tc_IonSource_DART_Setpts);

static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_TOFSignal_IonSourceSetpts[] =
  {
    &_tao_cases_TOFSignal_IonSourceSetpts__0,
    &_tao_cases_TOFSignal_IonSourceSetpts__1
  };

static TAO::TypeCode::Union<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TOFSignal_IonSourceSetpts (
    "IDL:TOFSignal/IonSourceSetpts:1.0",
    "IonSourceSetpts",
    &TOF_C::_tc_eIonSource,
    _tao_cases_TOFSignal_IonSourceSetpts,
    sizeof (_tao_cases_TOFSignal_IonSourceSetpts)/sizeof (_tao_cases_TOFSignal_IonSourceSetpts[0]),
    -1);
  

namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_IonSourceSetpts =
    &_tao_tc_TOFSignal_IonSourceSetpts;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_tofStaticSetpts[] =
      {
        { "setpts", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_tofStaticSetpts (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/tofStaticSetpts:1.0",
  "tofStaticSetpts",
  _tao_fields_TOFSignal_tofStaticSetpts,
  1);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_tofStaticSetpts =
    &_tao_tc_TOFSignal_tofStaticSetpts;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::tofStaticSetpts::_tao_any_destructor (
    void *_tao_void_pointer)
{
  tofStaticSetpts *_tao_tmp_pointer =
    static_cast<tofStaticSetpts *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_tofStaticActs[] =
      {
        { "acts", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_tofStaticActs (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/tofStaticActs:1.0",
  "tofStaticActs",
  _tao_fields_TOFSignal_tofStaticActs,
  1);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_tofStaticActs =
    &_tao_tc_TOFSignal_tofStaticActs;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::tofStaticActs::_tao_any_destructor (
    void *_tao_void_pointer)
{
  tofStaticActs *_tao_tmp_pointer =
    static_cast<tofStaticActs *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_AnalyzerSetpts[] =
      {
        { "einzel_lens_voltage", &CORBA::_tc_ulong },
        { "matsuda_plate_voltage", &CORBA::_tc_ulong },
        { "ion_gate_voltage", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_AnalyzerSetpts (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/AnalyzerSetpts:1.0",
  "AnalyzerSetpts",
  _tao_fields_TOFSignal_AnalyzerSetpts,
  3);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_AnalyzerSetpts =
    &_tao_tc_TOFSignal_AnalyzerSetpts;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::AnalyzerSetpts::_tao_any_destructor (
    void *_tao_void_pointer)
{
  AnalyzerSetpts *_tao_tmp_pointer =
    static_cast<AnalyzerSetpts *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_AnalyzerActuals[] =
      {
        { "einzel_lens_voltage", &CORBA::_tc_ulong },
        { "matsuda_plate_voltage", &CORBA::_tc_ulong },
        { "ion_gate_voltage", &CORBA::_tc_ulong },
        { "ion_gate_current", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_AnalyzerActuals (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/AnalyzerActuals:1.0",
  "AnalyzerActuals",
  _tao_fields_TOFSignal_AnalyzerActuals,
  4);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_AnalyzerActuals =
    &_tao_tc_TOFSignal_AnalyzerActuals;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::AnalyzerActuals::_tao_any_destructor (
    void *_tao_void_pointer)
{
  AnalyzerActuals *_tao_tmp_pointer =
    static_cast<AnalyzerActuals *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_AnalyzerDeviceData[] =
      {
        { "setpts", &TOFSignal::_tc_AnalyzerSetpts },
        { "actuals", &TOFSignal::_tc_AnalyzerActuals }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_AnalyzerDeviceData (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/AnalyzerDeviceData:1.0",
  "AnalyzerDeviceData",
  _tao_fields_TOFSignal_AnalyzerDeviceData,
  2);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_AnalyzerDeviceData =
    &_tao_tc_TOFSignal_AnalyzerDeviceData;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::AnalyzerDeviceData::_tao_any_destructor (
    void *_tao_void_pointer)
{
  AnalyzerDeviceData *_tao_tmp_pointer =
    static_cast<AnalyzerDeviceData *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_InstEvent[] =
      {
        { "eventId_", &CORBA::_tc_ulong },
        { "eventValue_", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_InstEvent (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/InstEvent:1.0",
  "InstEvent",
  _tao_fields_TOFSignal_InstEvent,
  2);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_InstEvent =
    &_tao_tc_TOFSignal_InstEvent;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::InstEvent::_tao_any_destructor (
    void *_tao_void_pointer)
{
  InstEvent *_tao_tmp_pointer =
    static_cast<InstEvent *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_SpectrumPeakInfo[] =
      {
        { "monitor_range_lower", &CORBA::_tc_float },
        { "monitor_range_upper", &CORBA::_tc_float },
        { "peakMass", &CORBA::_tc_double },
        { "peakHeight", &CORBA::_tc_float },
        { "peakArea", &CORBA::_tc_float },
        { "resolvingPower", &CORBA::_tc_float },
        { "resolvingPowerX1", &CORBA::_tc_float },
        { "resolvingPowerX2", &CORBA::_tc_float },
        { "resolvingPowerHH", &CORBA::_tc_float }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_SpectrumPeakInfo (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/SpectrumPeakInfo:1.0",
  "SpectrumPeakInfo",
  _tao_fields_TOFSignal_SpectrumPeakInfo,
  9);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_SpectrumPeakInfo =
    &_tao_tc_TOFSignal_SpectrumPeakInfo;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::SpectrumPeakInfo::_tao_any_destructor (
    void *_tao_void_pointer)
{
  SpectrumPeakInfo *_tao_tmp_pointer =
    static_cast<SpectrumPeakInfo *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TOFSIGNAL_SPECTRUMPEAKINFOVEC_CS_)
#define _TOFSIGNAL_SPECTRUMPEAKINFOVEC_CS_

TOFSignal::SpectrumPeakInfoVec::SpectrumPeakInfoVec (void)
{}

TOFSignal::SpectrumPeakInfoVec::SpectrumPeakInfoVec (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        SpectrumPeakInfo
      > (max)
{}

TOFSignal::SpectrumPeakInfoVec::SpectrumPeakInfoVec (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    TOFSignal::SpectrumPeakInfo * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        SpectrumPeakInfo
      >
    (max, length, buffer, release)
{}

TOFSignal::SpectrumPeakInfoVec::SpectrumPeakInfoVec (
    const SpectrumPeakInfoVec &seq)
  : ::TAO::unbounded_value_sequence<
        SpectrumPeakInfo
      > (seq)
{}

TOFSignal::SpectrumPeakInfoVec::~SpectrumPeakInfoVec (void)
{}

void TOFSignal::SpectrumPeakInfoVec::_tao_any_destructor (
    void * _tao_void_pointer)
{
  SpectrumPeakInfoVec * _tao_tmp_pointer =
    static_cast<SpectrumPeakInfoVec *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:51



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:466


#ifndef _TAO_TYPECODE_TOFSignal_SpectrumPeakInfoVec_GUARD
#define _TAO_TYPECODE_TOFSignal_SpectrumPeakInfoVec_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TOFSignal_SpectrumPeakInfoVec_0 (
          ::CORBA::tk_sequence,
          &TOFSignal::_tc_SpectrumPeakInfo,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TOFSignal_SpectrumPeakInfoVec_0 =
        &TOFSignal_SpectrumPeakInfoVec_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TOFSignal_SpectrumPeakInfoVec_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TOFSignal_SpectrumPeakInfoVec (
    ::CORBA::tk_alias,
    "IDL:TOFSignal/SpectrumPeakInfoVec:1.0",
    "SpectrumPeakInfoVec",
    &TAO::TypeCode::tc_TOFSignal_SpectrumPeakInfoVec_0);
  

namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_SpectrumPeakInfoVec =
    &_tao_tc_TOFSignal_SpectrumPeakInfoVec;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:466

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_SpectrumProcessedData[] =
      {
        { "tic", &CORBA::_tc_float },
        { "spectralBaselineLevel", &CORBA::_tc_float },
        { "uptime", &CORBA::_tc_ulonglong },
        { "info", &TOFSignal::_tc_SpectrumPeakInfoVec }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_SpectrumProcessedData (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/SpectrumProcessedData:1.0",
  "SpectrumProcessedData",
  _tao_fields_TOFSignal_SpectrumProcessedData,
  4);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_SpectrumProcessedData =
    &_tao_tc_TOFSignal_SpectrumProcessedData;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::SpectrumProcessedData::_tao_any_destructor (
    void *_tao_void_pointer)
{
  SpectrumProcessedData *_tao_tmp_pointer =
    static_cast<SpectrumProcessedData *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TOFSIGNAL_SPECTRUMPROCESSEDDATAARRAY_CS_)
#define _TOFSIGNAL_SPECTRUMPROCESSEDDATAARRAY_CS_

TOFSignal::SpectrumProcessedDataArray::SpectrumProcessedDataArray (void)
{}

TOFSignal::SpectrumProcessedDataArray::SpectrumProcessedDataArray (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        SpectrumProcessedData
      > (max)
{}

TOFSignal::SpectrumProcessedDataArray::SpectrumProcessedDataArray (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    TOFSignal::SpectrumProcessedData * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        SpectrumProcessedData
      >
    (max, length, buffer, release)
{}

TOFSignal::SpectrumProcessedDataArray::SpectrumProcessedDataArray (
    const SpectrumProcessedDataArray &seq)
  : ::TAO::unbounded_value_sequence<
        SpectrumProcessedData
      > (seq)
{}

TOFSignal::SpectrumProcessedDataArray::~SpectrumProcessedDataArray (void)
{}

void TOFSignal::SpectrumProcessedDataArray::_tao_any_destructor (
    void * _tao_void_pointer)
{
  SpectrumProcessedDataArray * _tao_tmp_pointer =
    static_cast<SpectrumProcessedDataArray *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:51



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:466


#ifndef _TAO_TYPECODE_TOFSignal_SpectrumProcessedDataArray_GUARD
#define _TAO_TYPECODE_TOFSignal_SpectrumProcessedDataArray_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TOFSignal_SpectrumProcessedDataArray_0 (
          ::CORBA::tk_sequence,
          &TOFSignal::_tc_SpectrumProcessedData,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TOFSignal_SpectrumProcessedDataArray_0 =
        &TOFSignal_SpectrumProcessedDataArray_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TOFSignal_SpectrumProcessedDataArray_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TOFSignal_SpectrumProcessedDataArray (
    ::CORBA::tk_alias,
    "IDL:TOFSignal/SpectrumProcessedDataArray:1.0",
    "SpectrumProcessedDataArray",
    &TAO::TypeCode::tc_TOFSignal_SpectrumProcessedDataArray_0);
  

namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_SpectrumProcessedDataArray =
    &_tao_tc_TOFSignal_SpectrumProcessedDataArray;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_TraceMetadata[] =
      {
        { "wellKnownEvents", &CORBA::_tc_ulong },
        { "ndata", &CORBA::_tc_ulong },
        { "uptime", &CORBA::_tc_ulonglong },
        { "timeSinceInject", &CORBA::_tc_ulong },
        { "sampInterval", &CORBA::_tc_ulong },
        { "dataType", &CORBA::_tc_ulong }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_TraceMetadata (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/TraceMetadata:1.0",
  "TraceMetadata",
  _tao_fields_TOFSignal_TraceMetadata,
  6);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_TraceMetadata =
    &_tao_tc_TOFSignal_TraceMetadata;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::TraceMetadata::_tao_any_destructor (
    void *_tao_void_pointer)
{
  TraceMetadata *_tao_tmp_pointer =
    static_cast<TraceMetadata *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TOFSIGNAL_VALUE_SEQUENCE_CS_)
#define _TOFSIGNAL_VALUE_SEQUENCE_CS_

TOFSignal::value_sequence::value_sequence (void)
{}

TOFSignal::value_sequence::value_sequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (max)
{}

TOFSignal::value_sequence::value_sequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::Long * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      >
    (max, length, buffer, release)
{}

TOFSignal::value_sequence::value_sequence (
    const value_sequence &seq)
  : ::TAO::unbounded_value_sequence<
        ::CORBA::Long
      > (seq)
{}

TOFSignal::value_sequence::~value_sequence (void)
{}

void TOFSignal::value_sequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  value_sequence * _tao_tmp_pointer =
    static_cast<value_sequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:51



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:466


#ifndef _TAO_TYPECODE_TOFSignal_value_sequence_GUARD
#define _TAO_TYPECODE_TOFSignal_value_sequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TOFSignal_value_sequence_0 (
          ::CORBA::tk_sequence,
          &CORBA::_tc_long,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TOFSignal_value_sequence_0 =
        &TOFSignal_value_sequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TOFSignal_value_sequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TOFSignal_value_sequence (
    ::CORBA::tk_alias,
    "IDL:TOFSignal/value_sequence:1.0",
    "value_sequence",
    &TAO::TypeCode::tc_TOFSignal_value_sequence_0);
  

namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_value_sequence =
    &_tao_tc_TOFSignal_value_sequence;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:466

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_datum[] =
      {
        { "acqSegment", &TOF::_tc_acqSegment },
        { "values", &TOFSignal::_tc_value_sequence }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_datum (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/datum:1.0",
  "datum",
  _tao_fields_TOFSignal_datum,
  2);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_datum =
    &_tao_tc_TOFSignal_datum;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::datum::_tao_any_destructor (
    void *_tao_void_pointer)
{
  datum *_tao_tmp_pointer =
    static_cast<datum *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\sequence_cs.cpp:73

#if !defined (_TOFSIGNAL_DATUM_SEQUENCE_CS_)
#define _TOFSIGNAL_DATUM_SEQUENCE_CS_

TOFSignal::datum_sequence::datum_sequence (void)
{}

TOFSignal::datum_sequence::datum_sequence (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        datum
      > (max)
{}

TOFSignal::datum_sequence::datum_sequence (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    TOFSignal::datum * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        datum
      >
    (max, length, buffer, release)
{}

TOFSignal::datum_sequence::datum_sequence (
    const datum_sequence &seq)
  : ::TAO::unbounded_value_sequence<
        datum
      > (seq)
{}

TOFSignal::datum_sequence::~datum_sequence (void)
{}

void TOFSignal::datum_sequence::_tao_any_destructor (
    void * _tao_void_pointer)
{
  datum_sequence * _tao_tmp_pointer =
    static_cast<datum_sequence *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\alias_typecode.cpp:51



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:466


#ifndef _TAO_TYPECODE_TOFSignal_datum_sequence_GUARD
#define _TAO_TYPECODE_TOFSignal_datum_sequence_GUARD

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

namespace TAO
{
  namespace TypeCode
  {
    namespace
    {
      TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
        TOFSignal_datum_sequence_0 (
          ::CORBA::tk_sequence,
          &TOFSignal::_tc_datum,
          0U);
        
      ::CORBA::TypeCode_ptr const tc_TOFSignal_datum_sequence_0 =
        &TOFSignal_datum_sequence_0;
    }
  }
}

TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_TOFSignal_datum_sequence_GUARD */

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_TOFSignal_datum_sequence (
    ::CORBA::tk_alias,
    "IDL:TOFSignal/datum_sequence:1.0",
    "datum_sequence",
    &TAO::TypeCode::tc_TOFSignal_datum_sequence_0);
  

namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_datum_sequence =
    &_tao_tc_TOFSignal_datum_sequence;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\struct_typecode.cpp:88



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_defn.cpp:466

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_TOFSignal_tofDATA[] =
      {
        { "sequenceNumber", &CORBA::_tc_ulong },
        { "rtcTimeStamp", &CORBA::_tc_ulonglong },
        { "clockTimeStamp", &CORBA::_tc_ulonglong },
        { "wellKnownEvents", &CORBA::_tc_ulong },
        { "methodId", &CORBA::_tc_ulong },
        { "numberOfProfiles", &CORBA::_tc_ushort },
        { "data", &TOFSignal::_tc_datum_sequence }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_TOFSignal_tofDATA (
  ::CORBA::tk_struct,
  "IDL:TOFSignal/tofDATA:1.0",
  "tofDATA",
  _tao_fields_TOFSignal_tofDATA,
  7);


namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_tofDATA =
    &_tao_tc_TOFSignal_tofDATA;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\structure_cs.cpp:59

void
TOFSignal::tofDATA::_tao_any_destructor (
    void *_tao_void_pointer)
{
  tofDATA *_tao_tmp_pointer =
    static_cast<tofDATA *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for TOFSignal::no_empty_file.

TOFSignal::no_empty_file_ptr
TAO::Objref_Traits<TOFSignal::no_empty_file>::duplicate (
    TOFSignal::no_empty_file_ptr p)
{
  return TOFSignal::no_empty_file::_duplicate (p);
}

void
TAO::Objref_Traits<TOFSignal::no_empty_file>::release (
    TOFSignal::no_empty_file_ptr p)
{
  ::CORBA::release (p);
}

TOFSignal::no_empty_file_ptr
TAO::Objref_Traits<TOFSignal::no_empty_file>::nil (void)
{
  return TOFSignal::no_empty_file::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TOFSignal::no_empty_file>::marshal (
    const TOFSignal::no_empty_file_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TOFSignal::no_empty_file::no_empty_file (void)
{
}

TOFSignal::no_empty_file::~no_empty_file (void)
{
}

void
TOFSignal::no_empty_file::_tao_any_destructor (void *_tao_void_pointer)
{
  no_empty_file *_tao_tmp_pointer =
    static_cast<no_empty_file *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TOFSignal::no_empty_file_ptr
TOFSignal::no_empty_file::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<no_empty_file>::narrow (
        _tao_objref,
        "IDL:TOFSignal/no_empty_file:1.0");
}

TOFSignal::no_empty_file_ptr
TOFSignal::no_empty_file::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<no_empty_file>::unchecked_narrow (
        _tao_objref);
}

TOFSignal::no_empty_file_ptr
TOFSignal::no_empty_file::_nil (void)
{
  return 0;
}

TOFSignal::no_empty_file_ptr
TOFSignal::no_empty_file::_duplicate (no_empty_file_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TOFSignal::no_empty_file::_tao_release (no_empty_file_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TOFSignal::no_empty_file::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:TOFSignal/no_empty_file:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TOFSignal::no_empty_file::_interface_repository_id (void) const
{
  return "IDL:TOFSignal/no_empty_file:1.0";
}

::CORBA::Boolean
TOFSignal::no_empty_file::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TOFSignal_no_empty_file (
    ::CORBA::tk_objref,
    "IDL:TOFSignal/no_empty_file:1.0",
    "no_empty_file");
  

namespace TOFSignal
{
  ::CORBA::TypeCode_ptr const _tc_no_empty_file =
    &_tao_tc_TOFSignal_no_empty_file;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_EI_Setpts &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::IonSource_EI_Setpts *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_EI_Setpts>::insert_copy (
          _tao_any,
          ::TOFSignal::IonSource_EI_Setpts::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_EI_Setpts,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::IonSource_EI_Setpts *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_EI_Setpts>::insert (
        _tao_any,
        ::TOFSignal::IonSource_EI_Setpts::_tao_any_destructor,
        ::TOFSignal::_tc_IonSource_EI_Setpts,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::IonSource_EI_Setpts *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::IonSource_EI_Setpts *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_EI_Setpts *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_EI_Setpts>::extract (
          _tao_any,
          ::TOFSignal::IonSource_EI_Setpts::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_EI_Setpts,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_EI_Setpts &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::IonSource_EI_Setpts *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_EI_Setpts>::insert_copy (
      _tao_any,
      TOFSignal::IonSource_EI_Setpts::_tao_any_destructor,
      TOFSignal::_tc_IonSource_EI_Setpts,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_EI_Setpts *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::IonSource_EI_Setpts>::insert (
    _tao_any,
    TOFSignal::IonSource_EI_Setpts::_tao_any_destructor,
    TOFSignal::_tc_IonSource_EI_Setpts,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_EI_Setpts *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::IonSource_EI_Setpts *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_EI_Setpts *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_EI_Setpts>::extract (
      _tao_any,
      TOFSignal::IonSource_EI_Setpts::_tao_any_destructor,
      TOFSignal::_tc_IonSource_EI_Setpts,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_EI_Actuals &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::IonSource_EI_Actuals *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_EI_Actuals>::insert_copy (
          _tao_any,
          ::TOFSignal::IonSource_EI_Actuals::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_EI_Actuals,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::IonSource_EI_Actuals *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_EI_Actuals>::insert (
        _tao_any,
        ::TOFSignal::IonSource_EI_Actuals::_tao_any_destructor,
        ::TOFSignal::_tc_IonSource_EI_Actuals,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::IonSource_EI_Actuals *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::IonSource_EI_Actuals *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_EI_Actuals *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_EI_Actuals>::extract (
          _tao_any,
          ::TOFSignal::IonSource_EI_Actuals::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_EI_Actuals,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_EI_Actuals &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::IonSource_EI_Actuals *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_EI_Actuals>::insert_copy (
      _tao_any,
      TOFSignal::IonSource_EI_Actuals::_tao_any_destructor,
      TOFSignal::_tc_IonSource_EI_Actuals,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_EI_Actuals *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::IonSource_EI_Actuals>::insert (
    _tao_any,
    TOFSignal::IonSource_EI_Actuals::_tao_any_destructor,
    TOFSignal::_tc_IonSource_EI_Actuals,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_EI_Actuals *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::IonSource_EI_Actuals *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_EI_Actuals *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_EI_Actuals>::extract (
      _tao_any,
      TOFSignal::IonSource_EI_Actuals::_tao_any_destructor,
      TOFSignal::_tc_IonSource_EI_Actuals,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_DART_Setpts &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::IonSource_DART_Setpts *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_DART_Setpts>::insert_copy (
          _tao_any,
          ::TOFSignal::IonSource_DART_Setpts::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_DART_Setpts,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::IonSource_DART_Setpts *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_DART_Setpts>::insert (
        _tao_any,
        ::TOFSignal::IonSource_DART_Setpts::_tao_any_destructor,
        ::TOFSignal::_tc_IonSource_DART_Setpts,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::IonSource_DART_Setpts *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::IonSource_DART_Setpts *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_DART_Setpts *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_DART_Setpts>::extract (
          _tao_any,
          ::TOFSignal::IonSource_DART_Setpts::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_DART_Setpts,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_DART_Setpts &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::IonSource_DART_Setpts *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_DART_Setpts>::insert_copy (
      _tao_any,
      TOFSignal::IonSource_DART_Setpts::_tao_any_destructor,
      TOFSignal::_tc_IonSource_DART_Setpts,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_DART_Setpts *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::IonSource_DART_Setpts>::insert (
    _tao_any,
    TOFSignal::IonSource_DART_Setpts::_tao_any_destructor,
    TOFSignal::_tc_IonSource_DART_Setpts,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_DART_Setpts *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::IonSource_DART_Setpts *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_DART_Setpts *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_DART_Setpts>::extract (
      _tao_any,
      TOFSignal::IonSource_DART_Setpts::_tao_any_destructor,
      TOFSignal::_tc_IonSource_DART_Setpts,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_DART_Actuals &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::IonSource_DART_Actuals *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_DART_Actuals>::insert_copy (
          _tao_any,
          ::TOFSignal::IonSource_DART_Actuals::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_DART_Actuals,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::IonSource_DART_Actuals *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_DART_Actuals>::insert (
        _tao_any,
        ::TOFSignal::IonSource_DART_Actuals::_tao_any_destructor,
        ::TOFSignal::_tc_IonSource_DART_Actuals,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::IonSource_DART_Actuals *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::IonSource_DART_Actuals *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSource_DART_Actuals *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSource_DART_Actuals>::extract (
          _tao_any,
          ::TOFSignal::IonSource_DART_Actuals::_tao_any_destructor,
          ::TOFSignal::_tc_IonSource_DART_Actuals,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_DART_Actuals &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::IonSource_DART_Actuals *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_DART_Actuals>::insert_copy (
      _tao_any,
      TOFSignal::IonSource_DART_Actuals::_tao_any_destructor,
      TOFSignal::_tc_IonSource_DART_Actuals,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_DART_Actuals *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::IonSource_DART_Actuals>::insert (
    _tao_any,
    TOFSignal::IonSource_DART_Actuals::_tao_any_destructor,
    TOFSignal::_tc_IonSource_DART_Actuals,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::IonSource_DART_Actuals *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::IonSource_DART_Actuals *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::IonSource_DART_Actuals *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::IonSource_DART_Actuals>::extract (
      _tao_any,
      TOFSignal::IonSource_DART_Actuals::_tao_any_destructor,
      TOFSignal::_tc_IonSource_DART_Actuals,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_union\any_op_cs.cpp:40


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSourceSetpts &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::IonSourceSetpts *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSourceSetpts>::insert_copy (
          _tao_any,
          ::TOFSignal::IonSourceSetpts::_tao_any_destructor,
          ::TOFSignal::_tc_IonSourceSetpts,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TOFSignal::IonSourceSetpts *_tao_elem
    )
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::IonSourceSetpts>::insert (
        _tao_any,
        ::TOFSignal::IonSourceSetpts::_tao_any_destructor,
        ::TOFSignal::_tc_IonSourceSetpts,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::IonSourceSetpts *&_tao_elem
    )
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::IonSourceSetpts *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::IonSourceSetpts *&_tao_elem
    )
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::IonSourceSetpts>::extract (
          _tao_any,
          ::TOFSignal::IonSourceSetpts::_tao_any_destructor,
          ::TOFSignal::_tc_IonSourceSetpts,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TOFSignal::IonSourceSetpts &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::IonSourceSetpts *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::IonSourceSetpts>::insert_copy (
        _tao_any,
        TOFSignal::IonSourceSetpts::_tao_any_destructor,
        TOFSignal::_tc_IonSourceSetpts,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TOFSignal::IonSourceSetpts *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<TOFSignal::IonSourceSetpts>::insert (
      _tao_any,
      TOFSignal::IonSourceSetpts::_tao_any_destructor,
      TOFSignal::_tc_IonSourceSetpts,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TOFSignal::IonSourceSetpts *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const TOFSignal::IonSourceSetpts *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TOFSignal::IonSourceSetpts *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::IonSourceSetpts>::extract (
        _tao_any,
        TOFSignal::IonSourceSetpts::_tao_any_destructor,
        TOFSignal::_tc_IonSourceSetpts,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::tofStaticSetpts &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::tofStaticSetpts *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::tofStaticSetpts>::insert_copy (
          _tao_any,
          ::TOFSignal::tofStaticSetpts::_tao_any_destructor,
          ::TOFSignal::_tc_tofStaticSetpts,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::tofStaticSetpts *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::tofStaticSetpts>::insert (
        _tao_any,
        ::TOFSignal::tofStaticSetpts::_tao_any_destructor,
        ::TOFSignal::_tc_tofStaticSetpts,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::tofStaticSetpts *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::tofStaticSetpts *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::tofStaticSetpts *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::tofStaticSetpts>::extract (
          _tao_any,
          ::TOFSignal::tofStaticSetpts::_tao_any_destructor,
          ::TOFSignal::_tc_tofStaticSetpts,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::tofStaticSetpts &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::tofStaticSetpts *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::tofStaticSetpts>::insert_copy (
      _tao_any,
      TOFSignal::tofStaticSetpts::_tao_any_destructor,
      TOFSignal::_tc_tofStaticSetpts,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::tofStaticSetpts *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::tofStaticSetpts>::insert (
    _tao_any,
    TOFSignal::tofStaticSetpts::_tao_any_destructor,
    TOFSignal::_tc_tofStaticSetpts,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::tofStaticSetpts *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::tofStaticSetpts *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::tofStaticSetpts *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::tofStaticSetpts>::extract (
      _tao_any,
      TOFSignal::tofStaticSetpts::_tao_any_destructor,
      TOFSignal::_tc_tofStaticSetpts,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::tofStaticActs &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::tofStaticActs *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::tofStaticActs>::insert_copy (
          _tao_any,
          ::TOFSignal::tofStaticActs::_tao_any_destructor,
          ::TOFSignal::_tc_tofStaticActs,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::tofStaticActs *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::tofStaticActs>::insert (
        _tao_any,
        ::TOFSignal::tofStaticActs::_tao_any_destructor,
        ::TOFSignal::_tc_tofStaticActs,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::tofStaticActs *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::tofStaticActs *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::tofStaticActs *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::tofStaticActs>::extract (
          _tao_any,
          ::TOFSignal::tofStaticActs::_tao_any_destructor,
          ::TOFSignal::_tc_tofStaticActs,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::tofStaticActs &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::tofStaticActs *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::tofStaticActs>::insert_copy (
      _tao_any,
      TOFSignal::tofStaticActs::_tao_any_destructor,
      TOFSignal::_tc_tofStaticActs,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::tofStaticActs *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::tofStaticActs>::insert (
    _tao_any,
    TOFSignal::tofStaticActs::_tao_any_destructor,
    TOFSignal::_tc_tofStaticActs,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::tofStaticActs *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::tofStaticActs *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::tofStaticActs *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::tofStaticActs>::extract (
      _tao_any,
      TOFSignal::tofStaticActs::_tao_any_destructor,
      TOFSignal::_tc_tofStaticActs,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::AnalyzerSetpts &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::AnalyzerSetpts *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerSetpts>::insert_copy (
          _tao_any,
          ::TOFSignal::AnalyzerSetpts::_tao_any_destructor,
          ::TOFSignal::_tc_AnalyzerSetpts,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::AnalyzerSetpts *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerSetpts>::insert (
        _tao_any,
        ::TOFSignal::AnalyzerSetpts::_tao_any_destructor,
        ::TOFSignal::_tc_AnalyzerSetpts,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::AnalyzerSetpts *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::AnalyzerSetpts *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::AnalyzerSetpts *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerSetpts>::extract (
          _tao_any,
          ::TOFSignal::AnalyzerSetpts::_tao_any_destructor,
          ::TOFSignal::_tc_AnalyzerSetpts,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::AnalyzerSetpts &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::AnalyzerSetpts *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerSetpts>::insert_copy (
      _tao_any,
      TOFSignal::AnalyzerSetpts::_tao_any_destructor,
      TOFSignal::_tc_AnalyzerSetpts,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::AnalyzerSetpts *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerSetpts>::insert (
    _tao_any,
    TOFSignal::AnalyzerSetpts::_tao_any_destructor,
    TOFSignal::_tc_AnalyzerSetpts,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::AnalyzerSetpts *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::AnalyzerSetpts *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::AnalyzerSetpts *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerSetpts>::extract (
      _tao_any,
      TOFSignal::AnalyzerSetpts::_tao_any_destructor,
      TOFSignal::_tc_AnalyzerSetpts,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::AnalyzerActuals &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::AnalyzerActuals *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerActuals>::insert_copy (
          _tao_any,
          ::TOFSignal::AnalyzerActuals::_tao_any_destructor,
          ::TOFSignal::_tc_AnalyzerActuals,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::AnalyzerActuals *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerActuals>::insert (
        _tao_any,
        ::TOFSignal::AnalyzerActuals::_tao_any_destructor,
        ::TOFSignal::_tc_AnalyzerActuals,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::AnalyzerActuals *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::AnalyzerActuals *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::AnalyzerActuals *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerActuals>::extract (
          _tao_any,
          ::TOFSignal::AnalyzerActuals::_tao_any_destructor,
          ::TOFSignal::_tc_AnalyzerActuals,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::AnalyzerActuals &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::AnalyzerActuals *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerActuals>::insert_copy (
      _tao_any,
      TOFSignal::AnalyzerActuals::_tao_any_destructor,
      TOFSignal::_tc_AnalyzerActuals,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::AnalyzerActuals *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerActuals>::insert (
    _tao_any,
    TOFSignal::AnalyzerActuals::_tao_any_destructor,
    TOFSignal::_tc_AnalyzerActuals,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::AnalyzerActuals *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::AnalyzerActuals *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::AnalyzerActuals *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerActuals>::extract (
      _tao_any,
      TOFSignal::AnalyzerActuals::_tao_any_destructor,
      TOFSignal::_tc_AnalyzerActuals,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::AnalyzerDeviceData &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::AnalyzerDeviceData *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerDeviceData>::insert_copy (
          _tao_any,
          ::TOFSignal::AnalyzerDeviceData::_tao_any_destructor,
          ::TOFSignal::_tc_AnalyzerDeviceData,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::AnalyzerDeviceData *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerDeviceData>::insert (
        _tao_any,
        ::TOFSignal::AnalyzerDeviceData::_tao_any_destructor,
        ::TOFSignal::_tc_AnalyzerDeviceData,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::AnalyzerDeviceData *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::AnalyzerDeviceData *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::AnalyzerDeviceData *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::AnalyzerDeviceData>::extract (
          _tao_any,
          ::TOFSignal::AnalyzerDeviceData::_tao_any_destructor,
          ::TOFSignal::_tc_AnalyzerDeviceData,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::AnalyzerDeviceData &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::AnalyzerDeviceData *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerDeviceData>::insert_copy (
      _tao_any,
      TOFSignal::AnalyzerDeviceData::_tao_any_destructor,
      TOFSignal::_tc_AnalyzerDeviceData,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::AnalyzerDeviceData *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerDeviceData>::insert (
    _tao_any,
    TOFSignal::AnalyzerDeviceData::_tao_any_destructor,
    TOFSignal::_tc_AnalyzerDeviceData,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::AnalyzerDeviceData *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::AnalyzerDeviceData *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::AnalyzerDeviceData *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::AnalyzerDeviceData>::extract (
      _tao_any,
      TOFSignal::AnalyzerDeviceData::_tao_any_destructor,
      TOFSignal::_tc_AnalyzerDeviceData,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::InstEvent &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::InstEvent *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::InstEvent>::insert_copy (
          _tao_any,
          ::TOFSignal::InstEvent::_tao_any_destructor,
          ::TOFSignal::_tc_InstEvent,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::InstEvent *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::InstEvent>::insert (
        _tao_any,
        ::TOFSignal::InstEvent::_tao_any_destructor,
        ::TOFSignal::_tc_InstEvent,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::InstEvent *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::InstEvent *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::InstEvent *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::InstEvent>::extract (
          _tao_any,
          ::TOFSignal::InstEvent::_tao_any_destructor,
          ::TOFSignal::_tc_InstEvent,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::InstEvent &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::InstEvent *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::InstEvent>::insert_copy (
      _tao_any,
      TOFSignal::InstEvent::_tao_any_destructor,
      TOFSignal::_tc_InstEvent,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::InstEvent *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::InstEvent>::insert (
    _tao_any,
    TOFSignal::InstEvent::_tao_any_destructor,
    TOFSignal::_tc_InstEvent,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::InstEvent *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::InstEvent *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::InstEvent *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::InstEvent>::extract (
      _tao_any,
      TOFSignal::InstEvent::_tao_any_destructor,
      TOFSignal::_tc_InstEvent,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumPeakInfo &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::SpectrumPeakInfo *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumPeakInfo>::insert_copy (
          _tao_any,
          ::TOFSignal::SpectrumPeakInfo::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumPeakInfo,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::SpectrumPeakInfo *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumPeakInfo>::insert (
        _tao_any,
        ::TOFSignal::SpectrumPeakInfo::_tao_any_destructor,
        ::TOFSignal::_tc_SpectrumPeakInfo,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::SpectrumPeakInfo *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::SpectrumPeakInfo *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumPeakInfo *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumPeakInfo>::extract (
          _tao_any,
          ::TOFSignal::SpectrumPeakInfo::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumPeakInfo,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::SpectrumPeakInfo &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::SpectrumPeakInfo *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumPeakInfo>::insert_copy (
      _tao_any,
      TOFSignal::SpectrumPeakInfo::_tao_any_destructor,
      TOFSignal::_tc_SpectrumPeakInfo,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::SpectrumPeakInfo *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::SpectrumPeakInfo>::insert (
    _tao_any,
    TOFSignal::SpectrumPeakInfo::_tao_any_destructor,
    TOFSignal::_tc_SpectrumPeakInfo,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::SpectrumPeakInfo *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::SpectrumPeakInfo *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::SpectrumPeakInfo *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumPeakInfo>::extract (
      _tao_any,
      TOFSignal::SpectrumPeakInfo::_tao_any_destructor,
      TOFSignal::_tc_SpectrumPeakInfo,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumPeakInfoVec &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::SpectrumPeakInfoVec *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumPeakInfoVec>::insert_copy (
          _tao_any,
          ::TOFSignal::SpectrumPeakInfoVec::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumPeakInfoVec,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TOFSignal::SpectrumPeakInfoVec *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumPeakInfoVec>::insert (
        _tao_any,
        ::TOFSignal::SpectrumPeakInfoVec::_tao_any_destructor,
        ::TOFSignal::_tc_SpectrumPeakInfoVec,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::SpectrumPeakInfoVec *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::SpectrumPeakInfoVec *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumPeakInfoVec *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumPeakInfoVec>::extract (
          _tao_any,
          ::TOFSignal::SpectrumPeakInfoVec::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumPeakInfoVec,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TOFSignal::SpectrumPeakInfoVec &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::SpectrumPeakInfoVec *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumPeakInfoVec>::insert_copy (
        _tao_any,
        TOFSignal::SpectrumPeakInfoVec::_tao_any_destructor,
        TOFSignal::_tc_SpectrumPeakInfoVec,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TOFSignal::SpectrumPeakInfoVec *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::SpectrumPeakInfoVec>::insert (
      _tao_any,
      TOFSignal::SpectrumPeakInfoVec::_tao_any_destructor,
      TOFSignal::_tc_SpectrumPeakInfoVec,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TOFSignal::SpectrumPeakInfoVec *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::SpectrumPeakInfoVec *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TOFSignal::SpectrumPeakInfoVec *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumPeakInfoVec>::extract (
        _tao_any,
        TOFSignal::SpectrumPeakInfoVec::_tao_any_destructor,
        TOFSignal::_tc_SpectrumPeakInfoVec,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumProcessedData &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::SpectrumProcessedData *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumProcessedData>::insert_copy (
          _tao_any,
          ::TOFSignal::SpectrumProcessedData::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumProcessedData,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::SpectrumProcessedData *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumProcessedData>::insert (
        _tao_any,
        ::TOFSignal::SpectrumProcessedData::_tao_any_destructor,
        ::TOFSignal::_tc_SpectrumProcessedData,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::SpectrumProcessedData *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::SpectrumProcessedData *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumProcessedData *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumProcessedData>::extract (
          _tao_any,
          ::TOFSignal::SpectrumProcessedData::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumProcessedData,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::SpectrumProcessedData &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::SpectrumProcessedData *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumProcessedData>::insert_copy (
      _tao_any,
      TOFSignal::SpectrumProcessedData::_tao_any_destructor,
      TOFSignal::_tc_SpectrumProcessedData,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::SpectrumProcessedData *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::SpectrumProcessedData>::insert (
    _tao_any,
    TOFSignal::SpectrumProcessedData::_tao_any_destructor,
    TOFSignal::_tc_SpectrumProcessedData,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::SpectrumProcessedData *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::SpectrumProcessedData *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::SpectrumProcessedData *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumProcessedData>::extract (
      _tao_any,
      TOFSignal::SpectrumProcessedData::_tao_any_destructor,
      TOFSignal::_tc_SpectrumProcessedData,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumProcessedDataArray &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::SpectrumProcessedDataArray *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumProcessedDataArray>::insert_copy (
          _tao_any,
          ::TOFSignal::SpectrumProcessedDataArray::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumProcessedDataArray,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TOFSignal::SpectrumProcessedDataArray *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumProcessedDataArray>::insert (
        _tao_any,
        ::TOFSignal::SpectrumProcessedDataArray::_tao_any_destructor,
        ::TOFSignal::_tc_SpectrumProcessedDataArray,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::SpectrumProcessedDataArray *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::SpectrumProcessedDataArray *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::SpectrumProcessedDataArray *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::SpectrumProcessedDataArray>::extract (
          _tao_any,
          ::TOFSignal::SpectrumProcessedDataArray::_tao_any_destructor,
          ::TOFSignal::_tc_SpectrumProcessedDataArray,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TOFSignal::SpectrumProcessedDataArray &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::SpectrumProcessedDataArray *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumProcessedDataArray>::insert_copy (
        _tao_any,
        TOFSignal::SpectrumProcessedDataArray::_tao_any_destructor,
        TOFSignal::_tc_SpectrumProcessedDataArray,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TOFSignal::SpectrumProcessedDataArray *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::SpectrumProcessedDataArray>::insert (
      _tao_any,
      TOFSignal::SpectrumProcessedDataArray::_tao_any_destructor,
      TOFSignal::_tc_SpectrumProcessedDataArray,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TOFSignal::SpectrumProcessedDataArray *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::SpectrumProcessedDataArray *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TOFSignal::SpectrumProcessedDataArray *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::SpectrumProcessedDataArray>::extract (
        _tao_any,
        TOFSignal::SpectrumProcessedDataArray::_tao_any_destructor,
        TOFSignal::_tc_SpectrumProcessedDataArray,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::TraceMetadata &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::TraceMetadata *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::TraceMetadata>::insert_copy (
          _tao_any,
          ::TOFSignal::TraceMetadata::_tao_any_destructor,
          ::TOFSignal::_tc_TraceMetadata,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::TraceMetadata *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::TraceMetadata>::insert (
        _tao_any,
        ::TOFSignal::TraceMetadata::_tao_any_destructor,
        ::TOFSignal::_tc_TraceMetadata,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::TraceMetadata *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::TraceMetadata *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::TraceMetadata *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::TraceMetadata>::extract (
          _tao_any,
          ::TOFSignal::TraceMetadata::_tao_any_destructor,
          ::TOFSignal::_tc_TraceMetadata,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::TraceMetadata &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::TraceMetadata *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::TraceMetadata>::insert_copy (
      _tao_any,
      TOFSignal::TraceMetadata::_tao_any_destructor,
      TOFSignal::_tc_TraceMetadata,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::TraceMetadata *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::TraceMetadata>::insert (
    _tao_any,
    TOFSignal::TraceMetadata::_tao_any_destructor,
    TOFSignal::_tc_TraceMetadata,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::TraceMetadata *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::TraceMetadata *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::TraceMetadata *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::TraceMetadata>::extract (
      _tao_any,
      TOFSignal::TraceMetadata::_tao_any_destructor,
      TOFSignal::_tc_TraceMetadata,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::value_sequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::value_sequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::value_sequence>::insert_copy (
          _tao_any,
          ::TOFSignal::value_sequence::_tao_any_destructor,
          ::TOFSignal::_tc_value_sequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TOFSignal::value_sequence *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::value_sequence>::insert (
        _tao_any,
        ::TOFSignal::value_sequence::_tao_any_destructor,
        ::TOFSignal::_tc_value_sequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::value_sequence *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::value_sequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::value_sequence *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::value_sequence>::extract (
          _tao_any,
          ::TOFSignal::value_sequence::_tao_any_destructor,
          ::TOFSignal::_tc_value_sequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TOFSignal::value_sequence &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::value_sequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::value_sequence>::insert_copy (
        _tao_any,
        TOFSignal::value_sequence::_tao_any_destructor,
        TOFSignal::_tc_value_sequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TOFSignal::value_sequence *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::value_sequence>::insert (
      _tao_any,
      TOFSignal::value_sequence::_tao_any_destructor,
      TOFSignal::_tc_value_sequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TOFSignal::value_sequence *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::value_sequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TOFSignal::value_sequence *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::value_sequence>::extract (
        _tao_any,
        TOFSignal::value_sequence::_tao_any_destructor,
        TOFSignal::_tc_value_sequence,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::datum &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::datum *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::datum>::insert_copy (
          _tao_any,
          ::TOFSignal::datum::_tao_any_destructor,
          ::TOFSignal::_tc_datum,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::datum *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::datum>::insert (
        _tao_any,
        ::TOFSignal::datum::_tao_any_destructor,
        ::TOFSignal::_tc_datum,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::datum *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::datum *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::datum *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::datum>::extract (
          _tao_any,
          ::TOFSignal::datum::_tao_any_destructor,
          ::TOFSignal::_tc_datum,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::datum &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::datum *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::datum>::insert_copy (
      _tao_any,
      TOFSignal::datum::_tao_any_destructor,
      TOFSignal::_tc_datum,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::datum *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::datum>::insert (
    _tao_any,
    TOFSignal::datum::_tao_any_destructor,
    TOFSignal::_tc_datum,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::datum *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::datum *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::datum *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::datum>::extract (
      _tao_any,
      TOFSignal::datum::_tao_any_destructor,
      TOFSignal::_tc_datum,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\any_op_cs.cpp:48


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  
  // Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::datum_sequence &_tao_elem
    )
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::datum_sequence *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::datum_sequence>::insert_copy (
          _tao_any,
          ::TOFSignal::datum_sequence::_tao_any_destructor,
          ::TOFSignal::_tc_datum_sequence,
          _tao_elem
        );
  }

  // Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TOFSignal::datum_sequence *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::datum_sequence>::insert (
        _tao_any,
        ::TOFSignal::datum_sequence::_tao_any_destructor,
        ::TOFSignal::_tc_datum_sequence,
        _tao_elem
      );
  }

  // Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::datum_sequence *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::datum_sequence *&> (
        _tao_elem
      );
  }

  // Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::datum_sequence *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::datum_sequence>::extract (
          _tao_any,
          ::TOFSignal::datum_sequence::_tao_any_destructor,
          ::TOFSignal::_tc_datum_sequence,
          _tao_elem
        );
  }
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const TOFSignal::datum_sequence &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::datum_sequence *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::datum_sequence>::insert_copy (
        _tao_any,
        TOFSignal::datum_sequence::_tao_any_destructor,
        TOFSignal::_tc_datum_sequence,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    TOFSignal::datum_sequence *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::datum_sequence>::insert (
      _tao_any,
      TOFSignal::datum_sequence::_tao_any_destructor,
      TOFSignal::_tc_datum_sequence,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TOFSignal::datum_sequence *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::datum_sequence *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const TOFSignal::datum_sequence *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::datum_sequence>::extract (
        _tao_any,
        TOFSignal::datum_sequence::_tao_any_destructor,
        TOFSignal::_tc_datum_sequence,
        _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\any_op_cs.cpp:46



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  /// Copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any,
      const ::TOFSignal::tofDATA &_tao_elem)
  {
    if (0 == &_tao_elem) // Trying to de-reference NULL object
      _tao_any <<= static_cast< ::TOFSignal::tofDATA *>( 0 ); // Use non-copying insertion of a NULL
    else
      TAO::Any_Dual_Impl_T< ::TOFSignal::tofDATA>::insert_copy (
          _tao_any,
          ::TOFSignal::tofDATA::_tao_any_destructor,
          ::TOFSignal::_tc_tofDATA,
          _tao_elem);
  }

  /// Non-copying insertion.
  void operator<<= (
      ::CORBA::Any &_tao_any, ::
      TOFSignal::tofDATA *_tao_elem)
  {
    TAO::Any_Dual_Impl_T< ::TOFSignal::tofDATA>::insert (
        _tao_any,
        ::TOFSignal::tofDATA::_tao_any_destructor,
        ::TOFSignal::_tc_tofDATA,
        _tao_elem);
  }

  /// Extraction to non-const pointer (deprecated).
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOFSignal::tofDATA *&_tao_elem)
  {
    return _tao_any >>= const_cast<
        const ::TOFSignal::tofDATA *&> (
        _tao_elem);
  }

  /// Extraction to const pointer.
  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      const ::TOFSignal::tofDATA *&_tao_elem)
  {
    return
      TAO::Any_Dual_Impl_T< ::TOFSignal::tofDATA>::extract (
          _tao_any,
          ::TOFSignal::tofDATA::_tao_any_destructor,
          ::TOFSignal::_tc_tofDATA,
          _tao_elem
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

/// Copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  const TOFSignal::tofDATA &_tao_elem)
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<TOFSignal::tofDATA *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<TOFSignal::tofDATA>::insert_copy (
      _tao_any,
      TOFSignal::tofDATA::_tao_any_destructor,
      TOFSignal::_tc_tofDATA,
      _tao_elem);
}

/// Non-copying insertion.
void operator<<= (
  ::CORBA::Any &_tao_any,
  TOFSignal::tofDATA *_tao_elem)
{
  TAO::Any_Dual_Impl_T<TOFSignal::tofDATA>::insert (
    _tao_any,
    TOFSignal::tofDATA::_tao_any_destructor,
    TOFSignal::_tc_tofDATA,
    _tao_elem);
}

/// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  TOFSignal::tofDATA *&_tao_elem)
{
  return _tao_any >>= const_cast<
      const TOFSignal::tofDATA *&> (
      _tao_elem);
}

/// Extraction to const pointer.
::CORBA::Boolean operator>>= (
  const ::CORBA::Any &_tao_any,
  const TOFSignal::tofDATA *&_tao_elem)
{
  return
    TAO::Any_Dual_Impl_T<TOFSignal::tofDATA>::extract (
      _tao_any,
      TOFSignal::tofDATA::_tao_any_destructor,
      TOFSignal::_tc_tofDATA,
      _tao_elem);
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TOFSignal::no_empty_file>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOFSignal
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      no_empty_file_ptr _tao_elem)
  {
    no_empty_file_ptr _tao_objptr =
      no_empty_file::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      no_empty_file_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<no_empty_file>::insert (
        _tao_any,
        no_empty_file::_tao_any_destructor,
        _tc_no_empty_file,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      no_empty_file_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<no_empty_file>::extract (
          _tao_any,
          no_empty_file::_tao_any_destructor,
          _tc_no_empty_file,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TOFSignal::no_empty_file_ptr _tao_elem)
{
  TOFSignal::no_empty_file_ptr _tao_objptr =
    TOFSignal::no_empty_file::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TOFSignal::no_empty_file_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TOFSignal::no_empty_file>::insert (
      _tao_any,
      TOFSignal::no_empty_file::_tao_any_destructor,
      TOFSignal::_tc_no_empty_file,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TOFSignal::no_empty_file_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TOFSignal::no_empty_file>::extract (
        _tao_any,
        TOFSignal::no_empty_file::_tao_any_destructor,
        TOFSignal::_tc_no_empty_file,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::IonSource_EI_Setpts &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.source_temp_setpt) &&
    (strm << _tao_aggregate.interface_temp_setpt) &&
    (strm << _tao_aggregate.ionization_voltage_setpt) &&
    (strm << _tao_aggregate.trap_current_setpt) &&
    (strm << _tao_aggregate.pulse_voltage_setpt) &&
    (strm << _tao_aggregate.potential_lift_voltage_setpt);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::IonSource_EI_Setpts &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.source_temp_setpt) &&
    (strm >> _tao_aggregate.interface_temp_setpt) &&
    (strm >> _tao_aggregate.ionization_voltage_setpt) &&
    (strm >> _tao_aggregate.trap_current_setpt) &&
    (strm >> _tao_aggregate.pulse_voltage_setpt) &&
    (strm >> _tao_aggregate.potential_lift_voltage_setpt);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::IonSource_EI_Actuals &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.source_temp_actual) &&
    (strm << _tao_aggregate.interface_temp_actual) &&
    (strm << _tao_aggregate.ionization_voltage_actual) &&
    (strm << _tao_aggregate.trap_current_actual) &&
    (strm << _tao_aggregate.pulse_voltage_actual) &&
    (strm << _tao_aggregate.potential_lift_voltage_actual);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::IonSource_EI_Actuals &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.source_temp_actual) &&
    (strm >> _tao_aggregate.interface_temp_actual) &&
    (strm >> _tao_aggregate.ionization_voltage_actual) &&
    (strm >> _tao_aggregate.trap_current_actual) &&
    (strm >> _tao_aggregate.pulse_voltage_actual) &&
    (strm >> _tao_aggregate.potential_lift_voltage_actual);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::IonSource_DART_Setpts &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.to_be_determined);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::IonSource_DART_Setpts &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.to_be_determined);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::IonSource_DART_Actuals &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.to_be_determined);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::IonSource_DART_Actuals &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.to_be_determined);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_union\cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::IonSourceSetpts &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case TOF_C::eIonSource_EI:
      {
        result = strm << _tao_union.ei ();
      }
      break;
    case TOF_C::eIonSource_DART:
      {
        result = strm << _tao_union.dart ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::IonSourceSetpts &_tao_union
  )
{
  TOF_C::eIonSource _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case TOF_C::eIonSource_EI:
      {
        TOFSignal::IonSource_EI_Setpts _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.ei (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case TOF_C::eIonSource_DART:
      {
        TOFSignal::IonSource_DART_Setpts _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.dart (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatability, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::tofStaticSetpts &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.setpts);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::tofStaticSetpts &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.setpts);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::tofStaticActs &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.acts);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::tofStaticActs &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.acts);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::AnalyzerSetpts &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.einzel_lens_voltage) &&
    (strm << _tao_aggregate.matsuda_plate_voltage) &&
    (strm << _tao_aggregate.ion_gate_voltage);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::AnalyzerSetpts &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.einzel_lens_voltage) &&
    (strm >> _tao_aggregate.matsuda_plate_voltage) &&
    (strm >> _tao_aggregate.ion_gate_voltage);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::AnalyzerActuals &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.einzel_lens_voltage) &&
    (strm << _tao_aggregate.matsuda_plate_voltage) &&
    (strm << _tao_aggregate.ion_gate_voltage) &&
    (strm << _tao_aggregate.ion_gate_current);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::AnalyzerActuals &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.einzel_lens_voltage) &&
    (strm >> _tao_aggregate.matsuda_plate_voltage) &&
    (strm >> _tao_aggregate.ion_gate_voltage) &&
    (strm >> _tao_aggregate.ion_gate_current);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::AnalyzerDeviceData &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.setpts) &&
    (strm << _tao_aggregate.actuals);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::AnalyzerDeviceData &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.setpts) &&
    (strm >> _tao_aggregate.actuals);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::InstEvent &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.eventId_) &&
    (strm << _tao_aggregate.eventValue_);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::InstEvent &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.eventId_) &&
    (strm >> _tao_aggregate.eventValue_);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::SpectrumPeakInfo &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.monitor_range_lower) &&
    (strm << _tao_aggregate.monitor_range_upper) &&
    (strm << _tao_aggregate.peakMass) &&
    (strm << _tao_aggregate.peakHeight) &&
    (strm << _tao_aggregate.peakArea) &&
    (strm << _tao_aggregate.resolvingPower) &&
    (strm << _tao_aggregate.resolvingPowerX1) &&
    (strm << _tao_aggregate.resolvingPowerX2) &&
    (strm << _tao_aggregate.resolvingPowerHH);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::SpectrumPeakInfo &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.monitor_range_lower) &&
    (strm >> _tao_aggregate.monitor_range_upper) &&
    (strm >> _tao_aggregate.peakMass) &&
    (strm >> _tao_aggregate.peakHeight) &&
    (strm >> _tao_aggregate.peakArea) &&
    (strm >> _tao_aggregate.resolvingPower) &&
    (strm >> _tao_aggregate.resolvingPowerX1) &&
    (strm >> _tao_aggregate.resolvingPowerX2) &&
    (strm >> _tao_aggregate.resolvingPowerHH);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TOFSignal_SpectrumPeakInfoVec_CPP_
#define _TAO_CDR_OP_TOFSignal_SpectrumPeakInfoVec_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::SpectrumPeakInfoVec &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::SpectrumPeakInfoVec &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TOFSignal_SpectrumPeakInfoVec_CPP_ */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::SpectrumProcessedData &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.tic) &&
    (strm << _tao_aggregate.spectralBaselineLevel) &&
    (strm << _tao_aggregate.uptime) &&
    (strm << _tao_aggregate.info);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::SpectrumProcessedData &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.tic) &&
    (strm >> _tao_aggregate.spectralBaselineLevel) &&
    (strm >> _tao_aggregate.uptime) &&
    (strm >> _tao_aggregate.info);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TOFSignal_SpectrumProcessedDataArray_CPP_
#define _TAO_CDR_OP_TOFSignal_SpectrumProcessedDataArray_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::SpectrumProcessedDataArray &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::SpectrumProcessedDataArray &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TOFSignal_SpectrumProcessedDataArray_CPP_ */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::TraceMetadata &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.wellKnownEvents) &&
    (strm << _tao_aggregate.ndata) &&
    (strm << _tao_aggregate.uptime) &&
    (strm << _tao_aggregate.timeSinceInject) &&
    (strm << _tao_aggregate.sampInterval) &&
    (strm << _tao_aggregate.dataType);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::TraceMetadata &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.wellKnownEvents) &&
    (strm >> _tao_aggregate.ndata) &&
    (strm >> _tao_aggregate.uptime) &&
    (strm >> _tao_aggregate.timeSinceInject) &&
    (strm >> _tao_aggregate.sampInterval) &&
    (strm >> _tao_aggregate.dataType);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TOFSignal_value_sequence_CPP_
#define _TAO_CDR_OP_TOFSignal_value_sequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::value_sequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::value_sequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TOFSignal_value_sequence_CPP_ */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::datum &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.acqSegment) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::datum &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.acqSegment) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_sequence\cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_TOFSignal_datum_sequence_CPP_
#define _TAO_CDR_OP_TOFSignal_datum_sequence_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::datum_sequence &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::datum_sequence &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_TOFSignal_datum_sequence_CPP_ */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_structure\cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::tofDATA &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.sequenceNumber) &&
    (strm << _tao_aggregate.rtcTimeStamp) &&
    (strm << _tao_aggregate.clockTimeStamp) &&
    (strm << _tao_aggregate.wellKnownEvents) &&
    (strm << _tao_aggregate.methodId) &&
    (strm << _tao_aggregate.numberOfProfiles) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::tofDATA &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.sequenceNumber) &&
    (strm >> _tao_aggregate.rtcTimeStamp) &&
    (strm >> _tao_aggregate.clockTimeStamp) &&
    (strm >> _tao_aggregate.wellKnownEvents) &&
    (strm >> _tao_aggregate.methodId) &&
    (strm >> _tao_aggregate.numberOfProfiles) &&
    (strm >> _tao_aggregate.data);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOFSignal::no_empty_file_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOFSignal::no_empty_file_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TOFSignal::no_empty_file RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



