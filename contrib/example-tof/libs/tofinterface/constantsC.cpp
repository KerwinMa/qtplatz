// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:376


#include "constantsC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "constantsC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\enum_typecode.cpp:31
static char const * const _tao_enumerators_TOF_C_eIonSource[] =
  {
    "eIonSource_Unknown",
    "eIonSource_EI",
    "eIonSource_DART"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_TOF_C_eIonSource (
    "IDL:TOF_C/eIonSource:1.0",
    "eIonSource",
    _tao_enumerators_TOF_C_eIonSource,
    3);
  

namespace TOF_C
{
  ::CORBA::TypeCode_ptr const _tc_eIonSource =
    &_tao_tc_TOF_C_eIonSource;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\enum_typecode.cpp:31
static char const * const _tao_enumerators_TOF_C_ePolarity[] =
  {
    "ePolarity_Indeterminate",
    "ePolarity_Positive",
    "ePolarity_Negative"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_TOF_C_ePolarity (
    "IDL:TOF_C/ePolarity:1.0",
    "ePolarity",
    _tao_enumerators_TOF_C_ePolarity,
    3);
  

namespace TOF_C
{
  ::CORBA::TypeCode_ptr const _tc_ePolarity =
    &_tao_tc_TOF_C_ePolarity;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for TOF_C::no_empty_file.

TOF_C::no_empty_file_ptr
TAO::Objref_Traits<TOF_C::no_empty_file>::duplicate (
    TOF_C::no_empty_file_ptr p)
{
  return TOF_C::no_empty_file::_duplicate (p);
}

void
TAO::Objref_Traits<TOF_C::no_empty_file>::release (
    TOF_C::no_empty_file_ptr p)
{
  ::CORBA::release (p);
}

TOF_C::no_empty_file_ptr
TAO::Objref_Traits<TOF_C::no_empty_file>::nil (void)
{
  return TOF_C::no_empty_file::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<TOF_C::no_empty_file>::marshal (
    const TOF_C::no_empty_file_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TOF_C::no_empty_file::no_empty_file (void)
{
}

TOF_C::no_empty_file::~no_empty_file (void)
{
}

void
TOF_C::no_empty_file::_tao_any_destructor (void *_tao_void_pointer)
{
  no_empty_file *_tao_tmp_pointer =
    static_cast<no_empty_file *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

TOF_C::no_empty_file_ptr
TOF_C::no_empty_file::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<no_empty_file>::narrow (
        _tao_objref,
        "IDL:TOF_C/no_empty_file:1.0");
}

TOF_C::no_empty_file_ptr
TOF_C::no_empty_file::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<no_empty_file>::unchecked_narrow (
        _tao_objref);
}

TOF_C::no_empty_file_ptr
TOF_C::no_empty_file::_nil (void)
{
  return 0;
}

TOF_C::no_empty_file_ptr
TOF_C::no_empty_file::_duplicate (no_empty_file_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
TOF_C::no_empty_file::_tao_release (no_empty_file_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
TOF_C::no_empty_file::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:TOF_C/no_empty_file:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* TOF_C::no_empty_file::_interface_repository_id (void) const
{
  return "IDL:TOF_C/no_empty_file:1.0";
}

::CORBA::Boolean
TOF_C::no_empty_file::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_TOF_C_no_empty_file (
    ::CORBA::tk_objref,
    "IDL:TOF_C/no_empty_file:1.0",
    "no_empty_file");
  

namespace TOF_C
{
  ::CORBA::TypeCode_ptr const _tc_no_empty_file =
    &_tao_tc_TOF_C_no_empty_file;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_enum\any_op_cs.cpp:38

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOF_C
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TOF_C::eIonSource _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::TOF_C::eIonSource>::insert (
        _tao_any,
        ::TOF_C::_tc_eIonSource,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOF_C::eIonSource &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::TOF_C::eIonSource>::extract (
          _tao_any,
          ::TOF_C::_tc_eIonSource,
          _tao_elem 
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    TOF_C::eIonSource _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<TOF_C::eIonSource>::insert (
      _tao_any,
      TOF_C::_tc_eIonSource,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TOF_C::eIonSource &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<TOF_C::eIonSource>::extract (
        _tao_any,
        TOF_C::_tc_eIonSource,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_enum\any_op_cs.cpp:38

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOF_C
{
  void operator<<= (
      ::CORBA::Any &_tao_any,
      ::TOF_C::ePolarity _tao_elem
    )
  {
    TAO::Any_Basic_Impl_T< ::TOF_C::ePolarity>::insert (
        _tao_any,
        ::TOF_C::_tc_ePolarity,
        _tao_elem
      );
  }

  ::CORBA::Boolean operator>>= (
      const ::CORBA::Any &_tao_any,
      ::TOF_C::ePolarity &_tao_elem
    )
  {
    return
      TAO::Any_Basic_Impl_T< ::TOF_C::ePolarity>::extract (
          _tao_any,
          ::TOF_C::_tc_ePolarity,
          _tao_elem 
        );
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    TOF_C::ePolarity _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<TOF_C::ePolarity>::insert (
      _tao_any,
      TOF_C::_tc_ePolarity,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    TOF_C::ePolarity &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<TOF_C::ePolarity>::extract (
        _tao_any,
        TOF_C::_tc_ePolarity,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<TOF_C::no_empty_file>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace TOF_C
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      no_empty_file_ptr _tao_elem)
  {
    no_empty_file_ptr _tao_objptr =
      no_empty_file::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      no_empty_file_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<no_empty_file>::insert (
        _tao_any,
        no_empty_file::_tao_any_destructor,
        _tc_no_empty_file,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      no_empty_file_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<no_empty_file>::extract (
          _tao_any,
          no_empty_file::_tao_any_destructor,
          _tc_no_empty_file,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TOF_C::no_empty_file_ptr _tao_elem)
{
  TOF_C::no_empty_file_ptr _tao_objptr =
    TOF_C::no_empty_file::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    TOF_C::no_empty_file_ptr *_tao_elem)
{
  TAO::Any_Impl_T<TOF_C::no_empty_file>::insert (
      _tao_any,
      TOF_C::no_empty_file::_tao_any_destructor,
      TOF_C::_tc_no_empty_file,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    TOF_C::no_empty_file_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<TOF_C::no_empty_file>::extract (
        _tao_any,
        TOF_C::no_empty_file::_tao_any_destructor,
        TOF_C::_tc_no_empty_file,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, TOF_C::eIonSource _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, TOF_C::eIonSource & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<TOF_C::eIonSource> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_enum\cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, TOF_C::ePolarity _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, TOF_C::ePolarity & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<TOF_C::ePolarity> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const TOF_C::no_empty_file_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    TOF_C::no_empty_file_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::TOF_C::no_empty_file RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



