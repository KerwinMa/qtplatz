// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:152

#ifndef _TAO_IDL_SIOC_W3QUCW_H_
#define _TAO_IDL_SIOC_W3QUCW_H_

#include /**/ "ace/pre.h"


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/Arg_Traits_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/Any_Insert_Policy_T.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Var_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include /**/ "tao/Version.h"
#include /**/ "tao/Versioned_Namespace.h"

#if TAO_MAJOR_VERSION != 2 || TAO_MINOR_VERSION != 1 || TAO_BETA_VERSION != 9
#error This file should be regenerated with TAO_IDL
#endif

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_root\root_ch.cpp:160
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:38

namespace SIO
{

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_interface.cpp:750

#if !defined (_SIO_RECEIVER__VAR_OUT_CH_)
#define _SIO_RECEIVER__VAR_OUT_CH_

  class Receiver;
  typedef Receiver *Receiver_ptr;

  typedef
    TAO_Objref_Var_T<
        Receiver
      >
    Receiver_var;
  
  typedef
    TAO_Objref_Out_T<
        Receiver
      >
    Receiver_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:43

  class  Receiver
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Receiver>;

    // TAO_IDL - Generated from
    // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    typedef Receiver_ptr _ptr_type;
    typedef Receiver_var _var_type;
    typedef Receiver_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static Receiver_ptr _duplicate (Receiver_ptr obj);

    static void _tao_release (Receiver_ptr obj);

    static Receiver_ptr _narrow (::CORBA::Object_ptr obj);
    static Receiver_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Receiver_ptr _nil (void);

    virtual void recv (
      const char * text);

    virtual void event (
      ::CORBA::Long ev);

    // TAO_IDL - Generated from
    // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    Receiver (void);

    // Concrete non-local interface only.
    Receiver (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    Receiver (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~Receiver (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Receiver (const Receiver &);

    void operator= (const Receiver &);
  };

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:37

  extern  ::CORBA::TypeCode_ptr const _tc_Receiver;

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_interface.cpp:750

#if !defined (_SIO_FPGA__VAR_OUT_CH_)
#define _SIO_FPGA__VAR_OUT_CH_

  class FPGA;
  typedef FPGA *FPGA_ptr;

  typedef
    TAO_Objref_Var_T<
        FPGA
      >
    FPGA_var;
  
  typedef
    TAO_Objref_Out_T<
        FPGA
      >
    FPGA_out;

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:43

  class  FPGA
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<FPGA>;

    // TAO_IDL - Generated from
    // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_type.cpp:307

    typedef FPGA_ptr _ptr_type;
    typedef FPGA_var _var_type;
    typedef FPGA_out _out_type;

    static void _tao_any_destructor (void *);

    // The static operations.
    static FPGA_ptr _duplicate (FPGA_ptr obj);

    static void _tao_release (FPGA_ptr obj);

    static FPGA_ptr _narrow (::CORBA::Object_ptr obj);
    static FPGA_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static FPGA_ptr _nil (void);

    virtual ::CORBA::Boolean connect (
      ::SIO::Receiver_ptr receiver);

    virtual ::CORBA::Boolean disconnect (
      ::SIO::Receiver_ptr receiver);

    virtual ::CORBA::Boolean send (
      const char * text,
      ::CORBA::String_out reply);

    // TAO_IDL - Generated from
    // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ch.cpp:140

    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  
  protected:
    // Concrete interface only.
    FPGA (void);

    // Concrete non-local interface only.
    FPGA (
        ::IOP::IOR *ior,
        TAO_ORB_Core *orb_core);
    
    // Non-local interface only.
    FPGA (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);

    virtual ~FPGA (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    FPGA (const FPGA &);

    void operator= (const FPGA &);
  };

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\typecode_decl.cpp:37

  extern  ::CORBA::TypeCode_ptr const _tc_FPGA;

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_module\module_ch.cpp:67

} // module SIO

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:147

#if !defined (_SIO_RECEIVER__ARG_TRAITS_)
#define _SIO_RECEIVER__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::SIO::Receiver>
    : public
        Object_Arg_Traits_T<
            ::SIO::Receiver_ptr,
            ::SIO::Receiver_var,
            ::SIO::Receiver_out,
            TAO::Objref_Traits<SIO::Receiver>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_arg_traits.cpp:147

#if !defined (_SIO_FPGA__ARG_TRAITS_)
#define _SIO_FPGA__ARG_TRAITS_

  template<>
  class  Arg_Traits< ::SIO::FPGA>
    : public
        Object_Arg_Traits_T<
            ::SIO::FPGA_ptr,
            ::SIO::FPGA_var,
            ::SIO::FPGA_out,
            TAO::Objref_Traits<SIO::FPGA>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_traits.cpp:62

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_SIO_RECEIVER__TRAITS_)
#define _SIO_RECEIVER__TRAITS_

  template<>
  struct  Objref_Traits< ::SIO::Receiver>
  {
    static ::SIO::Receiver_ptr duplicate (
        ::SIO::Receiver_ptr p);
    static void release (
        ::SIO::Receiver_ptr p);
    static ::SIO::Receiver_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SIO::Receiver_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */

#if !defined (_SIO_FPGA__TRAITS_)
#define _SIO_FPGA__TRAITS_

  template<>
  struct  Objref_Traits< ::SIO::FPGA>
  {
    static ::SIO::FPGA_ptr duplicate (
        ::SIO::FPGA_ptr p);
    static void release (
        ::SIO::FPGA_ptr p);
    static ::SIO::FPGA_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::SIO::FPGA_ptr p,
        TAO_OutputCDR & cdr);
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SIO
{
   void operator<<= ( ::CORBA::Any &, Receiver_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Receiver_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Receiver_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, SIO::Receiver_ptr); // copying
 void operator<<= (::CORBA::Any &, SIO::Receiver_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SIO::Receiver_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_ch.cpp:44



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SIO
{
   void operator<<= ( ::CORBA::Any &, FPGA_ptr); // copying
   void operator<<= ( ::CORBA::Any &, FPGA_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, FPGA_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, SIO::FPGA_ptr); // copying
 void operator<<= (::CORBA::Any &, SIO::FPGA_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, SIO::FPGA_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:44

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SIO::Receiver_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SIO::Receiver_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_ch.cpp:44

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const SIO::FPGA_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, SIO::FPGA_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:1703
#if defined (__ACE_INLINE__)
#include "sioC.inl"
#endif /* defined INLINE */

#include /**/ "ace/post.h"

#endif /* ifndef */

