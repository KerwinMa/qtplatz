// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:376


#include "sioC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "sioC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for SIO::Receiver.

SIO::Receiver_ptr
TAO::Objref_Traits<SIO::Receiver>::duplicate (
    SIO::Receiver_ptr p)
{
  return SIO::Receiver::_duplicate (p);
}

void
TAO::Objref_Traits<SIO::Receiver>::release (
    SIO::Receiver_ptr p)
{
  ::CORBA::release (p);
}

SIO::Receiver_ptr
TAO::Objref_Traits<SIO::Receiver>::nil (void)
{
  return SIO::Receiver::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SIO::Receiver>::marshal (
    const SIO::Receiver_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:91

void
SIO::Receiver::recv (
  const char * text)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_text (text);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_text
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "recv",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:91

void
SIO::Receiver::event (
  ::CORBA::Long ev)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_ev (ev);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ev
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "event",
      5,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
    );

  _tao_call.invoke (0, 0);
}

SIO::Receiver::Receiver (void)
{
}

SIO::Receiver::~Receiver (void)
{
}

void
SIO::Receiver::_tao_any_destructor (void *_tao_void_pointer)
{
  Receiver *_tao_tmp_pointer =
    static_cast<Receiver *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SIO::Receiver_ptr
SIO::Receiver::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Receiver>::narrow (
        _tao_objref,
        "IDL:SIO/Receiver:1.0");
}

SIO::Receiver_ptr
SIO::Receiver::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<Receiver>::unchecked_narrow (
        _tao_objref);
}

SIO::Receiver_ptr
SIO::Receiver::_nil (void)
{
  return 0;
}

SIO::Receiver_ptr
SIO::Receiver::_duplicate (Receiver_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
SIO::Receiver::_tao_release (Receiver_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SIO::Receiver::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:SIO/Receiver:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* SIO::Receiver::_interface_repository_id (void) const
{
  return "IDL:SIO/Receiver:1.0";
}

::CORBA::Boolean
SIO::Receiver::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SIO_Receiver (
    ::CORBA::tk_objref,
    "IDL:SIO/Receiver:1.0",
    "Receiver");
  

namespace SIO
{
  ::CORBA::TypeCode_ptr const _tc_Receiver =
    &_tao_tc_SIO_Receiver;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_cs.cpp:51

// Traits specializations for SIO::FPGA.

SIO::FPGA_ptr
TAO::Objref_Traits<SIO::FPGA>::duplicate (
    SIO::FPGA_ptr p)
{
  return SIO::FPGA::_duplicate (p);
}

void
TAO::Objref_Traits<SIO::FPGA>::release (
    SIO::FPGA_ptr p)
{
  ::CORBA::release (p);
}

SIO::FPGA_ptr
TAO::Objref_Traits<SIO::FPGA>::nil (void)
{
  return SIO::FPGA::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<SIO::FPGA>::marshal (
    const SIO::FPGA_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:91

::CORBA::Boolean
SIO::FPGA::connect (
  ::SIO::Receiver_ptr receiver)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::SIO::Receiver>::in_arg_val _tao_receiver (receiver);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_receiver
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "connect",
      7,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:91

::CORBA::Boolean
SIO::FPGA::disconnect (
  ::SIO::Receiver_ptr receiver)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::SIO::Receiver>::in_arg_val _tao_receiver (receiver);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_receiver
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "disconnect",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_cs.cpp:91

::CORBA::Boolean
SIO::FPGA::send (
  const char * text,
  ::CORBA::String_out reply)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_text (text);
  TAO::Arg_Traits< char *>::out_arg_val _tao_reply (reply);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_text,
      &_tao_reply
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "send",
      4,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

SIO::FPGA::FPGA (void)
{
}

SIO::FPGA::~FPGA (void)
{
}

void
SIO::FPGA::_tao_any_destructor (void *_tao_void_pointer)
{
  FPGA *_tao_tmp_pointer =
    static_cast<FPGA *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

SIO::FPGA_ptr
SIO::FPGA::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<FPGA>::narrow (
        _tao_objref,
        "IDL:SIO/FPGA:1.0");
}

SIO::FPGA_ptr
SIO::FPGA::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<FPGA>::unchecked_narrow (
        _tao_objref);
}

SIO::FPGA_ptr
SIO::FPGA::_nil (void)
{
  return 0;
}

SIO::FPGA_ptr
SIO::FPGA::_duplicate (FPGA_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
SIO::FPGA::_tao_release (FPGA_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
SIO::FPGA::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:SIO/FPGA:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* SIO::FPGA::_interface_repository_id (void) const
{
  return "IDL:SIO/FPGA:1.0";
}

::CORBA::Boolean
SIO::FPGA::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_typecode\objref_typecode.cpp:72

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_SIO_FPGA (
    ::CORBA::tk_objref,
    "IDL:SIO/FPGA:1.0",
    "FPGA");
  

namespace SIO
{
  ::CORBA::TypeCode_ptr const _tc_FPGA =
    &_tao_tc_SIO_FPGA;
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SIO::Receiver>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SIO
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Receiver_ptr _tao_elem)
  {
    Receiver_ptr _tao_objptr =
      Receiver::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Receiver_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Receiver>::insert (
        _tao_any,
        Receiver::_tao_any_destructor,
        _tc_Receiver,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Receiver_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Receiver>::extract (
          _tao_any,
          Receiver::_tao_any_destructor,
          _tc_Receiver,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SIO::Receiver_ptr _tao_elem)
{
  SIO::Receiver_ptr _tao_objptr =
    SIO::Receiver::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SIO::Receiver_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SIO::Receiver>::insert (
      _tao_any,
      SIO::Receiver::_tao_any_destructor,
      SIO::_tc_Receiver,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SIO::Receiver_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SIO::Receiver>::extract (
        _tao_any,
        SIO::Receiver::_tao_any_destructor,
        SIO::_tc_Receiver,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\any_op_cs.cpp:41
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<SIO::FPGA>::to_object (
      ::CORBA::Object_ptr &_tao_elem) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace SIO
{
  

  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      FPGA_ptr _tao_elem)
  {
    FPGA_ptr _tao_objptr =
      FPGA::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }

  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      FPGA_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<FPGA>::insert (
        _tao_any,
        FPGA::_tao_any_destructor,
        _tc_FPGA,
        *_tao_elem);
  }

  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      FPGA_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<FPGA>::extract (
          _tao_any,
          FPGA::_tao_any_destructor,
          _tc_FPGA,
          _tao_elem);
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SIO::FPGA_ptr _tao_elem)
{
  SIO::FPGA_ptr _tao_objptr =
    SIO::FPGA::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    SIO::FPGA_ptr *_tao_elem)
{
  TAO::Any_Impl_T<SIO::FPGA>::insert (
      _tao_any,
      SIO::FPGA::_tao_any_destructor,
      SIO::_tc_FPGA,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    SIO::FPGA_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<SIO::FPGA>::extract (
        _tao_any,
        SIO::FPGA::_tao_any_destructor,
        SIO::_tc_FPGA,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SIO::Receiver_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SIO::Receiver_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::SIO::Receiver RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const SIO::FPGA_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    SIO::FPGA_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::SIO::FPGA RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



