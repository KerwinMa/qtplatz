// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.1.9
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_codegen.cpp:652

#ifndef _TAO_IDL_TOFS_RQ4XSR_CPP_
#define _TAO_IDL_TOFS_RQ4XSR_CPP_


#include "tofS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_interface.cpp:1867

class TAO_TOF_Session_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_TOF_Session_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_TOF_Session_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 15, 62, 62, 62, 62, 62, 62, 62,
     62, 62, 62, 62, 62,  0, 62, 13, 62,  0,
     10,  5, 62, 20, 62, 30, 62, 20,  0, 62,
      0, 20, 10, 62, 30,  0,  0, 62, 62, 62,
     62, 62, 62, 62, 62, 62, 62, 62,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_TOF_Session_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 28,
      MIN_WORD_LENGTH = 4,
      MAX_WORD_LENGTH = 19,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 61,
      HASH_VALUE_RANGE = 57,
      DUPLICATES = 2,
      WORDLIST_SIZE = 33
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"shell", &POA_Instrument::Session::shell_skel, 0},
      {"connect", &POA_Instrument::Session::connect_skel, 0},
      {"shutdown", &POA_Instrument::Session::shutdown_skel, 0},
      {"stop_run", &POA_Instrument::Session::stop_run_skel, 0},
      {"start_run", &POA_Instrument::Session::start_run_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"suspend_run", &POA_Instrument::Session::suspend_run_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"event_out", &POA_Instrument::Session::event_out_skel, 0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"setConfiguration", &POA_Instrument::Session::setConfiguration_skel, 0},
      {"software_revision", &POA_Instrument::Session::software_revision_skel, 0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"configComplete", &POA_Instrument::Session::configComplete_skel, 0},
      {"disconnect", &POA_Instrument::Session::disconnect_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"prepare_for_run", &POA_Instrument::Session::prepare_for_run_skel, 0},
      {"setControlMethod", &POA_TOF::Session::setControlMethod_skel, 0},
      {"echo", &POA_Instrument::Session::echo_skel, 0},
      {"get_status", &POA_Instrument::Session::get_status_skel, 0},
      {"setBrokerManagerIOR", &POA_Instrument::Session::setBrokerManagerIOR_skel, 0},
      {"debug", &POA_TOF::Session::debug_skel, 0},
      {"push_back", &POA_Instrument::Session::push_back_skel, 0},
      {"resume_run", &POA_Instrument::Session::resume_run_skel, 0},
      {"initialize", &POA_Instrument::Session::initialize_skel, 0},
      {"getControlMethod", &POA_Instrument::Session::getControlMethod_skel, 0},
      {"get_fpga_sio", &POA_TOF::Session::get_fpga_sio_skel, 0},
      {"getObserver", &POA_Instrument::Session::getObserver_skel, 0},
    };

  static const signed char lookup[] =
    {
       -1,  -1,  -1,  -7,  -2,   5,  -1,   6, -66,   9,  10,  11,  -1,  12, 
       13,  14,  15,  16,  17,  18,  19,  -1,  -1,  -1,  20,  21,  22,  -1, 
       -1,  23,  24,  -1,  -1,  -1,  25,  26,  -1,  -1,  -1,  27,  28,  -1, 
       -1,  -1,  -1,  29,  30,  -1,  -1,  -1,  -1,  -1,  31,  -1,  -1,  -1, 
       -1,  -1,  -1,  -1,  -1,  32, 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          int slot = lookup[key];

          if (slot >= 0 && slot < WORDLIST_SIZE)
            {
              const char *s = wordlist[slot].opname;

              if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
                return &wordlist[slot];
            }
          else if (slot < 0 && slot >= -MAX_HASH_VALUE)
            return 0;
          else
            {
              unsigned int offset = key + slot + (slot > 0 ? -MAX_HASH_VALUE : MAX_HASH_VALUE);
              const TAO_operation_db_entry *base = &wordlist[-lookup[offset]];
              const TAO_operation_db_entry *ptr = base + -lookup[offset + 1];

              while (--ptr >= base)
                if (*str == *ptr->opname && !ACE_OS::strncmp (str + 1, ptr->opname + 1, len - 1))
                  return ptr;
            }
        }
    }
  return 0;
}

static TAO_TOF_Session_Perfect_Hash_OpTable tao_TOF_Session_optable;

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:93

POA_TOF::Session::Session (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_TOF_Session_optable;
}

POA_TOF::Session::Session (const Session& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_Instrument::Session (rhs)
{
}

POA_TOF::Session::~Session (void)
{
}

namespace POA_TOF
{
  

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:83

  class debug_Session
    : public TAO::Upcall_Command
  {
  public:
    inline debug_Session (
      POA_TOF::Session * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::WChar *> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::WChar *> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->debug (
        arg_1
        , arg_2);
    }
  
  private:
    POA_TOF::Session * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:171

void POA_TOF::Session::debug_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_val _tao_text;
  TAO::SArg_Traits< ::CORBA::WChar *>::in_arg_val _tao_key;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_text,
      &_tao_key
    };
  
  static size_t const nargs = 3;

  POA_TOF::Session * const impl =
    dynamic_cast<POA_TOF::Session *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  debug_Session command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TOF
{
  

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:83

  class setControlMethod_Session
    : public TAO::Upcall_Command
  {
  public:
    inline setControlMethod_Session (
      POA_TOF::Session * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::TOF::ControlMethod>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::TOF::ControlMethod> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< char *>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< char *> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->setControlMethod (
          arg_1
          , arg_2);
    }
  
  private:
    POA_TOF::Session * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:171

void POA_TOF::Session::setControlMethod_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::TOF::ControlMethod>::in_arg_val _tao_method;
  TAO::SArg_Traits< char *>::in_arg_val _tao_hint;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_method,
      &_tao_hint
    };
  
  static size_t const nargs = 3;

  POA_TOF::Session * const impl =
    dynamic_cast<POA_TOF::Session *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  setControlMethod_Session command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_TOF
{
  

  // TAO_IDL - Generated from
  // c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\upcall_command_ss.cpp:83

  class get_fpga_sio_Session
    : public TAO::Upcall_Command
  {
  public:
    inline get_fpga_sio_Session (
      POA_TOF::Session * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }

    virtual void execute (void)
    {
      TAO::SArg_Traits< ::SIO::FPGA>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::SIO::FPGA> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->get_fpga_sio ();
    }
  
  private:
    POA_TOF::Session * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_operation\operation_ss.cpp:171

void POA_TOF::Session::get_fpga_sio_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::SIO::FPGA>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_TOF::Session * const impl =
    dynamic_cast<POA_TOF::Session *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  get_fpga_sio_Session command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:166



::CORBA::Boolean POA_TOF::Session::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:Instrument/Session:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:TOF/Session:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_TOF::Session::_interface_repository_id (void) const
{
  return "IDL:TOF/Session:1.0";
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:426

void POA_TOF::Session::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// c:\users\toshi\src\vc11\ace_wrappers\tao\tao_idl\be\be_visitor_interface\interface_ss.cpp:373

TOF::Session *
POA_TOF::Session::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::TOF::Session STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

